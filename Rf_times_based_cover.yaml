## for hardware I'm using a Sonoff RF bridge with the RF chip flashed with Portiche Firmware.
## Guide: https://community.home-assistant.io/t/using-a-sonoff-rf-bridge-with-esphome-portiche-firmware-with-no-hardware-hacking/287187?u=samnewman86
esphome:
  name: rfbridge
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: "myssid"
  password: "my password"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Rfbridge Fallback Hotspot"
    password: "another password"

captive_portal:

ota:
  password: "and another"
api:
  password: "and another"

#this is important as the RF chip talks to esp on these pins at this baud rate
uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 19200
#need to disable uart logging as it will interfere
logger:
  baud_rate: 0

#this allows ha to when RF signals are received, I'm not using this for anything yet.
rf_bridge:
  on_code_received:
    then:
      - homeassistant.event:
          event: esphome.rf_code_received
          data:
            sync: !lambda 'char buffer [10];return itoa(data.sync,buffer,16);'
            low: !lambda 'char buffer [10];return itoa(data.low,buffer,16);'
            high: !lambda 'char buffer [10];return itoa(data.high,buffer,16);'
            code: !lambda 'char buffer [10];return itoa(data.code,buffer,16);'

# the interesting bit, controlling the awning motor
cover:
  - platform: time_based
    name: "Sun Awning"
    device_class: awning
    assumed_state: true
    has_built_in_endstop: true

    open_action:
      - rf_bridge.send_raw:
          raw: "output from bitbucket converter with spaces removed"
    open_duration: 60s

    close_action:
      - rf_bridge.send_raw:
          raw: "output from bitbucket converter with spaces removed"
    close_duration: 60s

    stop_action:
      - rf_bridge.send_raw:
          raw: "output from bitbucket converter with spaces removed"
